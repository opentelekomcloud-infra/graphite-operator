---
- name: Create graphite-web Service
  community.kubernetes.k8s:
    state: "{{ state }}"
    namespace: "{{ graphite_namespace }}"
    definition:
      apiVersion: "v1"
      kind: "Service"
      metadata:
        name: "{{ graphite_web_svc_name }}"
        labels:
          app.kubernetes.io/name: "graphite"
          app.kubernetes.io/instance: "graphite-{{ansible_operator_meta.name }}"
          app.kubernetes.io/version: "{{ graphite_version }}"
          app.kubernetes.io/managed-by: "operator"
      spec:
        type: "ClusterIP"
        ports:
          - name: "graphite-gui"
            port: 80
            protocol: "TCP"
        selector:
          app.kubernetes.io/name: "graphite"
          app.kubernetes.io/component: "graphite-web"
          app.kubernetes.io/instance: "graphite-{{ansible_operator_meta.name }}"

- name: Create graphite-web StatefulSet
  community.kubernetes.k8s:
    state: "{{ state }}"
    namespace: "{{ graphite_namespace }}"
    force: "yes"
    definition:
      apiVersion: "apps/v1"
      kind: "StatefulSet"
      metadata:
        name: "{{ graphite_web_ss_name }}"
        labels:
          app.kubernetes.io/name: "graphite"
          app.kubernetes.io/component: "graphite-web"
          app.kubernetes.io/instance: "graphite-{{ansible_operator_meta.name }}"
          app.kubernetes.io/version: "{{ graphite_version }}"
          app.kubernetes.io/managed-by: "operator"
      spec:
        selector:
          matchLabels:
            app.kubernetes.io/name: "graphite"
            app.kubernetes.io/component: "graphite-web"
            app.kubernetes.io/instance: "graphite-{{ansible_operator_meta.name }}"
        serviceName: "{{ graphite_web_svc_name }}"
        replicas: "{{ graphite_web_count }}"
        template:
          metadata:
            labels:
              app.kubernetes.io/name: "graphite"
              app.kubernetes.io/component: "graphite-web"
              app.kubernetes.io/instance: "graphite-{{ansible_operator_meta.name }}"
          spec:
            containers:
              - resources: "{{ graphite_web_resources | default(omit) }}"
                readinessProbe:
                  httpGet:
                    path: "/"
                    port: "web"
                  timeoutSeconds: "{{ graphite_web_readiness_timeout }}"
                livenessProbe:
                  httpGet:
                    path: "/"
                    port: "web"
                  timeoutSeconds: "{{ graphite_web_liveness_timeout }}"
                name: "graphite-web"
                env:
                  - name: "GRAPHITE_TIME_ZONE"
                    value: "{{ graphite_timezone }}"
                  - name: "REDIS_TAGDB"
                    value: "0"
                  - name: "CARBON_DISABLED"
                    value: "1"
                  - name: "CARBON_AGGREGATOR_DISABLED"
                    value: "1"
                  - name: "STATSD_DISABLED"
                    value: "1"
                  - name: "REDIS_DISABLED"
                    value: "1"
                  - name: "GRAPHITE_CLUSTER_SERVERS"
                    value: "{{ cluster_hosts | join(',') }}"
                  - name: "MEMCACHE_HOST"
                    value: "{{ memcache_hosts | join(',') }}"
                securityContext:
                  privileged: true
                ports:
                  - name: "web"
                    containerPort: 80
                    protocol: "TCP"
                imagePullPolicy: "IfNotPresent"
                volumeMounts:
                  - name: graphite-configmap
                    mountPath: /opt/graphite/conf/
                  - name: graphite-web-configmap
                    mountPath: /etc/nginx/sites-enabled/
                image: "{{ graphite_web_image }}"
            volumes:
              - name: "graphite-configmap"
                configMap:
                  name: "{{ graphite_cm_name }}"
                  defaultMode: 420
              - name: "graphite-web-configmap"
                configMap:
                  name: "{{ graphite_web_cm_name }}"
                  defaultMode: 420
            serviceAccount: "{{ graphite_service_account | default(omit) }}"

- name: Manage Ingress
  community.kubernetes.k8s:
    state: "{{ state }}"
    namespace: "{{ graphite_namespace }}"
    definition: "{{ lookup('template', 'graphite-ingress.yaml.j2') | from_yaml }}"
  when: graphite_ingress_host is defined
