---
# tasks file for Graphite
#
- set_fact:
    cluster_hosts: "{{ (cluster_hosts|default([])) + [([(graphite_carbon_node_ss_name+'-%0x'), graphite_carbon_node_svc_name, graphite_namespace, 'svc.cluster.local:8080'])|join('.')|format(item)] }}"
    relay_destinations: "{{ (relay_destinations|default([])) + [([(graphite_carbon_node_ss_name+'-%0x'), graphite_carbon_node_svc_name, graphite_namespace, ('svc.cluster.local:' + graphite_relay_destination_port|string)])|join('.')|format(item)] }}"
    aggregate_destinations: "{{ (aggregate_destinations|default([])) + [([(graphite_carbon_node_ss_name+'-%0x'), graphite_carbon_node_svc_name, graphite_namespace, 'svc.cluster.local:2004'])|join('.')|format(item)] }}"
  loop: "{{ range(0, graphite_carbon_node_count) | list }}"

- set_fact:
    relay_destinations: "{{ (relay_destinations|default([])) + graphite_additional_relay_destinations }}"
  when: 
    - graphite_additional_relay_destinations is defined 
    - graphite_additional_relay_destinations|length > 0

- set_fact:
    cluster_hosts: "{{ cluster_hosts + graphite_additional_cluster_hosts }}"
  when:
    - graphite_additional_cluster_hosts is defined
    - graphite_additional_cluster_hosts|length > 0

- set_fact:
    aggregate_destinations: "{{ (aggregate_destinations|default([])) + graphite_additional_aggregate_destinations }}"
  when: 
    - graphite_additional_aggregate_destinations is defined 
    - graphite_additional_aggregate_destinations|length > 0

- set_fact:
    graphite_relay_destinations: "{{ relay_destinations|join(', ') }}"
    graphite_aggregate_destinations: "{{ aggregate_destinations|join(', ') }}"

- set_fact:
    memcache_hosts: "{{ (memcache_hosts|default([])) + [([(graphite_memcached_ss_name + '-%0x'), graphite_memcached_svc_name, graphite_namespace, 'svc.cluster.local:11211']) |join('.')|format(item) ] }}"
  loop: "{{ range(0, graphite_memcached_count) | list }}"
  when:
    - override_memcache_hosts is not defined

- set_fact:
    memcache_hosts: "{{ override_memcache_hosts }}"
  when:
    - override_memcache_hosts is defined

- name: Verify graphite ConfigMap
  community.kubernetes.k8s_info:
    kind: ConfigMap
    api_version: v1
    name: "{{ graphite_cm_name }}"
    namespace: '{{ graphite_namespace }}'
  register: graphite_cm_result_existing
  when: state != 'absent'

- name: Create default Graphite ConfigMap
  community.kubernetes.k8s:
    state: "{{ state }}"
    namespace: "{{ graphite_namespace }}"
    name: "{{ graphite_cm_name }}"
    kind: ConfigMap
    api_version: v1
    definition: 
      metadata:
        labels:
          app.kubernetes.io/name: graphite
          app.kubernetes.io/instance: "graphite-{{ansible_operator_meta.name }}"
            #          app.kubernetes.io/managed-by: operator
          app.kubernetes.io/version: "{{ graphite_version }}"
      data:
        aggregation-rules.conf: "{{ lookup('template', 'aggregation-rules.conf.j2') }}"
        blacklist.conf: "{{ lookup('template', 'blacklist.conf.j2') }}"
        carbon.conf: "{{ lookup('template', 'carbon.conf.j2') }}"
        carbon.amqp.conf: "{{ lookup('template', 'carbon.amqp.conf.j2') }}"
        dashboard.conf: "{{ lookup('template', 'dashboard.conf.j2') }}"
        go-carbon.conf: "{{ lookup('template', 'go-carbon.conf.j2') }}"
        graphite.wsgi.example: "{{ lookup('template', 'graphite.wsgi.example.j2') }}"
        graphTemplates.conf: "{{ lookup('template', 'graphTemplates.conf.j2') }}"
        relay-rules.conf: "{{ lookup('template', 'relay-rules.conf.j2') }}"
        rewrite-rules.conf: "{{ lookup('template', 'rewrite-rules.conf.j2') }}"
        storage-aggregation.conf: "{{ lookup('template', 'storage-aggregation.conf.j2') }}"
        storage-schemas.conf: "{{ lookup('template', 'storage-schemas.conf.j2') }}"
        whitelist.conf: "{{ lookup('template', 'whitelist.conf.j2') }}"
  register: graphite_cm_result
  when: graphite_cm_result_existing.resources | length == 0 or state == 'absent'

- name: Create default Graphite Web ConfigMap
  community.kubernetes.k8s:
    state: "{{ state }}"
    force: "yes"
    namespace: "{{ graphite_namespace }}"
    name: "{{ graphite_web_cm_name }}"
    kind: ConfigMap
    api_version: v1
    definition: 
      metadata:
        labels:
          app.kubernetes.io/name: graphite
          app.kubernetes.io/instance: "graphite-{{ansible_operator_meta.name }}"
            #app.kubernetes.io/managed-by: operator
          app.kubernetes.io/version: "{{ graphite_version }}"
      data:
        graphite-statsd.conf: "{{ lookup('template', 'nginx-graphite-statsd.conf.j2') }}"

- name: Verify Graphite-StatsD ConfigMap
  community.kubernetes.k8s_info:
    kind: ConfigMap
    api_version: v1
    name: "{{ graphite_statsd_cm_name }}"
    namespace: '{{ graphite_namespace }}'
  register: graphite_statsd_cm_result_existing
  when: state != 'absent'

- name: Create default Graphite-StatsD ConfigMap
  community.kubernetes.k8s:
    state: "{{ state }}"
    force: "no"
    namespace: "{{ graphite_namespace }}"
    definition: "{{ lookup('template', 'graphite-statsd-configmap.yaml.j2') | from_yaml }}"
  register: graphite_statsd_cm_result
  when: graphite_statsd_cm_result_existing.resources | length == 0 or state == 'absent'

# refetch CMs to get their version
- name: Fetch graphite ConfigMap
  community.kubernetes.k8s_info:
    kind: ConfigMap
    api_version: v1
    name: "{{ graphite_cm_name }}"
    namespace: '{{ graphite_namespace }}'
  register: graphite_cm_result
  when: state != 'absent'

- name: Fetch graphite-statsd ConfigMap
  community.kubernetes.k8s_info:
    kind: "ConfigMap"
    api_version: "v1"
    name: "{{ graphite_statsd_cm_name }}"
    namespace: '{{ graphite_namespace }}'
  register: graphite_statsd_cm_result
  when: state != 'absent'

- include_tasks: memcached.yaml
- include_tasks: carbon.yaml
- include_tasks: carbon-relay.yaml
- include_tasks: graphite-web.yaml
- include_tasks: statsd.yaml
